{"ast":null,"code":"var _jsxFileName = \"D:\\\\DOCtoPDF\\\\doc-to-pdf\\\\frontend\\\\src\\\\components\\\\DocToPdfConverter.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef } from \"react\";\nimport { renderAsync } from \"docx-preview\";\nimport html2pdf from \"html2pdf.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DocToPdfConverter = () => {\n  _s();\n  const [file, setFile] = useState(null);\n  const previewRef = useRef();\n  const handleFileChange = e => {\n    if (e.target.files[0]) {\n      setFile(e.target.files[0]);\n    }\n  };\n  const handleConvert = async () => {\n    if (!file) {\n      alert(\"Please upload a file first.\");\n      return;\n    }\n    const reader = new FileReader();\n    reader.onload = async event => {\n      try {\n        const arrayBuffer = event.target.result;\n\n        // Render the .docx content to HTML\n        await renderAsync(arrayBuffer, previewRef.current);\n\n        // Convert the rendered HTML to a PDF\n        const pdfOptions = {\n          margin: 1,\n          filename: \"converted.pdf\",\n          html2canvas: {\n            scale: 2\n          },\n          jsPDF: {\n            unit: \"in\",\n            format: \"letter\",\n            orientation: \"portrait\"\n          }\n        };\n        html2pdf().set(pdfOptions).from(previewRef.current).save();\n      } catch (error) {\n        console.error(\"Error converting file:\", error);\n      }\n    };\n    reader.readAsArrayBuffer(file);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"space-y-4\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      accept: \".docx\",\n      onChange: handleFileChange,\n      className: \"border p-2\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleConvert,\n      className: \"w-full bg-purple-600 hover:bg-purple-700 text-white py-2 px-4 rounded shadow font-semibold\",\n      children: \"Convert to PDF\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: previewRef,\n      className: \"hidden\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n};\n_s(DocToPdfConverter, \"fB8A8AMiA4ru2orBohr+0ZFEQ+M=\");\n_c = DocToPdfConverter;\nexport default DocToPdfConverter;\nvar _c;\n$RefreshReg$(_c, \"DocToPdfConverter\");","map":{"version":3,"names":["React","useState","useRef","renderAsync","html2pdf","jsxDEV","_jsxDEV","DocToPdfConverter","_s","file","setFile","previewRef","handleFileChange","e","target","files","handleConvert","alert","reader","FileReader","onload","event","arrayBuffer","result","current","pdfOptions","margin","filename","html2canvas","scale","jsPDF","unit","format","orientation","set","from","save","error","console","readAsArrayBuffer","className","children","type","accept","onChange","fileName","_jsxFileName","lineNumber","columnNumber","onClick","ref","_c","$RefreshReg$"],"sources":["D:/DOCtoPDF/doc-to-pdf/frontend/src/components/DocToPdfConverter.js"],"sourcesContent":["import React, { useState, useRef } from \"react\";\r\nimport { renderAsync } from \"docx-preview\";\r\nimport html2pdf from \"html2pdf.js\";\r\n\r\nconst DocToPdfConverter = () => {\r\n  const [file, setFile] = useState(null);\r\n  const previewRef = useRef();\r\n\r\n  const handleFileChange = (e) => {\r\n    if (e.target.files[0]) {\r\n      setFile(e.target.files[0]);\r\n    }\r\n  };\r\n\r\n  const handleConvert = async () => {\r\n    if (!file) {\r\n      alert(\"Please upload a file first.\");\r\n      return;\r\n    }\r\n\r\n    const reader = new FileReader();\r\n    reader.onload = async (event) => {\r\n      try {\r\n        const arrayBuffer = event.target.result;\r\n\r\n        // Render the .docx content to HTML\r\n        await renderAsync(arrayBuffer, previewRef.current);\r\n\r\n        // Convert the rendered HTML to a PDF\r\n        const pdfOptions = {\r\n          margin: 1,\r\n          filename: \"converted.pdf\",\r\n          html2canvas: { scale: 2 },\r\n          jsPDF: { unit: \"in\", format: \"letter\", orientation: \"portrait\" },\r\n        };\r\n        html2pdf().set(pdfOptions).from(previewRef.current).save();\r\n      } catch (error) {\r\n        console.error(\"Error converting file:\", error);\r\n      }\r\n    };\r\n\r\n    reader.readAsArrayBuffer(file);\r\n  };\r\n\r\n  return (\r\n    <div className=\"space-y-4\">\r\n      <input\r\n        type=\"file\"\r\n        accept=\".docx\"\r\n        onChange={handleFileChange}\r\n        className=\"border p-2\"\r\n      />\r\n      <button\r\n        onClick={handleConvert}\r\n        className=\"w-full bg-purple-600 hover:bg-purple-700 text-white py-2 px-4 rounded shadow font-semibold\"\r\n      >\r\n        Convert to PDF\r\n      </button>\r\n      <div ref={previewRef} className=\"hidden\"></div> {/* Hidden container for rendering */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DocToPdfConverter;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,MAAM,QAAQ,OAAO;AAC/C,SAASC,WAAW,QAAQ,cAAc;AAC1C,OAAOC,QAAQ,MAAM,aAAa;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnC,MAAMC,iBAAiB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC9B,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAMU,UAAU,GAAGT,MAAM,CAAC,CAAC;EAE3B,MAAMU,gBAAgB,GAAIC,CAAC,IAAK;IAC9B,IAAIA,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC,EAAE;MACrBL,OAAO,CAACG,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC,CAAC;IAC5B;EACF,CAAC;EAED,MAAMC,aAAa,GAAG,MAAAA,CAAA,KAAY;IAChC,IAAI,CAACP,IAAI,EAAE;MACTQ,KAAK,CAAC,6BAA6B,CAAC;MACpC;IACF;IAEA,MAAMC,MAAM,GAAG,IAAIC,UAAU,CAAC,CAAC;IAC/BD,MAAM,CAACE,MAAM,GAAG,MAAOC,KAAK,IAAK;MAC/B,IAAI;QACF,MAAMC,WAAW,GAAGD,KAAK,CAACP,MAAM,CAACS,MAAM;;QAEvC;QACA,MAAMpB,WAAW,CAACmB,WAAW,EAAEX,UAAU,CAACa,OAAO,CAAC;;QAElD;QACA,MAAMC,UAAU,GAAG;UACjBC,MAAM,EAAE,CAAC;UACTC,QAAQ,EAAE,eAAe;UACzBC,WAAW,EAAE;YAAEC,KAAK,EAAE;UAAE,CAAC;UACzBC,KAAK,EAAE;YAAEC,IAAI,EAAE,IAAI;YAAEC,MAAM,EAAE,QAAQ;YAAEC,WAAW,EAAE;UAAW;QACjE,CAAC;QACD7B,QAAQ,CAAC,CAAC,CAAC8B,GAAG,CAACT,UAAU,CAAC,CAACU,IAAI,CAACxB,UAAU,CAACa,OAAO,CAAC,CAACY,IAAI,CAAC,CAAC;MAC5D,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAChD;IACF,CAAC;IAEDnB,MAAM,CAACqB,iBAAiB,CAAC9B,IAAI,CAAC;EAChC,CAAC;EAED,oBACEH,OAAA;IAAKkC,SAAS,EAAC,WAAW;IAAAC,QAAA,gBACxBnC,OAAA;MACEoC,IAAI,EAAC,MAAM;MACXC,MAAM,EAAC,OAAO;MACdC,QAAQ,EAAEhC,gBAAiB;MAC3B4B,SAAS,EAAC;IAAY;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACvB,CAAC,eACF1C,OAAA;MACE2C,OAAO,EAAEjC,aAAc;MACvBwB,SAAS,EAAC,4FAA4F;MAAAC,QAAA,EACvG;IAED;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eACT1C,OAAA;MAAK4C,GAAG,EAAEvC,UAAW;MAAC6B,SAAS,EAAC;IAAQ;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,KAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC7C,CAAC;AAEV,CAAC;AAACxC,EAAA,CAzDID,iBAAiB;AAAA4C,EAAA,GAAjB5C,iBAAiB;AA2DvB,eAAeA,iBAAiB;AAAC,IAAA4C,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}