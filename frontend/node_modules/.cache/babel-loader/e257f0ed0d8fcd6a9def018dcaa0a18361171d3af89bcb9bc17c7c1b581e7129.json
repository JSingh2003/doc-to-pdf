{"ast":null,"code":"var _jsxFileName = \"D:\\\\DOCtoPDF\\\\doc-to-pdf\\\\frontend\\\\src\\\\components\\\\DocToPdfConverter.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef } from \"react\";\nimport { renderAsync } from \"docx-preview\";\nimport html2pdf from \"html2pdf.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DocToPdfConverter = () => {\n  _s();\n  const [file, setFile] = useState(null);\n  const previewRef = useRef();\n\n  // Handle file input change\n  const handleFileChange = e => {\n    if (e.target.files[0]) {\n      setFile(e.target.files[0]);\n    }\n  };\n\n  // Handle file conversion\n  const handleConvert = async () => {\n    if (!file) {\n      alert(\"Please upload a file first.\");\n      return;\n    }\n    const reader = new FileReader();\n    reader.onload = async event => {\n      try {\n        const arrayBuffer = event.target.result;\n\n        // Render the .docx content to HTML\n        await renderAsync(arrayBuffer, previewRef.current);\n\n        // Check if rendering completed successfully\n        if (previewRef.current && previewRef.current.childElementCount === 0) {\n          alert(\"Rendering failed. No content available.\");\n          return;\n        }\n\n        // Convert the rendered HTML to a PDF\n        const pdfOptions = {\n          margin: 1,\n          filename: \"converted.pdf\",\n          html2canvas: {\n            scale: 2,\n            // Increase resolution for better quality\n            useCORS: true // Handle cross-origin images if necessary\n          },\n          jsPDF: {\n            unit: \"in\",\n            format: \"letter\",\n            orientation: \"portrait\"\n          }\n        };\n\n        // Ensure content is visible before converting to PDF\n        previewRef.current.style.visibility = \"visible\";\n\n        // Use html2pdf to generate the PDF from the rendered HTML\n        html2pdf().set(pdfOptions).from(previewRef.current).save();\n\n        // Optionally hide content again after PDF generation\n        previewRef.current.style.visibility = \"hidden\";\n      } catch (error) {\n        console.error(\"Error converting file:\", error);\n        alert(\"Error converting the document. Please try again.\");\n      }\n    };\n\n    // Read the file as an ArrayBuffer\n    reader.readAsArrayBuffer(file);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"doc-to-pdf-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"file-input-container\",\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        accept: \".docx\",\n        onChange: handleFileChange,\n        className: \"file-input\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleConvert,\n      className: \"convert-button\",\n      children: \"Convert to PDF\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: previewRef,\n      style: {\n        visibility: \"hidden\",\n        minHeight: \"1px\",\n        maxWidth: \"100%\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n};\n_s(DocToPdfConverter, \"fB8A8AMiA4ru2orBohr+0ZFEQ+M=\");\n_c = DocToPdfConverter;\nexport default DocToPdfConverter;\nvar _c;\n$RefreshReg$(_c, \"DocToPdfConverter\");","map":{"version":3,"names":["React","useState","useRef","renderAsync","html2pdf","jsxDEV","_jsxDEV","DocToPdfConverter","_s","file","setFile","previewRef","handleFileChange","e","target","files","handleConvert","alert","reader","FileReader","onload","event","arrayBuffer","result","current","childElementCount","pdfOptions","margin","filename","html2canvas","scale","useCORS","jsPDF","unit","format","orientation","style","visibility","set","from","save","error","console","readAsArrayBuffer","className","children","type","accept","onChange","fileName","_jsxFileName","lineNumber","columnNumber","onClick","ref","minHeight","maxWidth","_c","$RefreshReg$"],"sources":["D:/DOCtoPDF/doc-to-pdf/frontend/src/components/DocToPdfConverter.js"],"sourcesContent":["import React, { useState, useRef } from \"react\";\r\nimport { renderAsync } from \"docx-preview\";\r\nimport html2pdf from \"html2pdf.js\";\r\n\r\nconst DocToPdfConverter = () => {\r\n  const [file, setFile] = useState(null);\r\n  const previewRef = useRef();\r\n\r\n  // Handle file input change\r\n  const handleFileChange = (e) => {\r\n    if (e.target.files[0]) {\r\n      setFile(e.target.files[0]);\r\n    }\r\n  };\r\n\r\n  // Handle file conversion\r\n  const handleConvert = async () => {\r\n    if (!file) {\r\n      alert(\"Please upload a file first.\");\r\n      return;\r\n    }\r\n\r\n    const reader = new FileReader();\r\n    reader.onload = async (event) => {\r\n      try {\r\n        const arrayBuffer = event.target.result;\r\n\r\n        // Render the .docx content to HTML\r\n        await renderAsync(arrayBuffer, previewRef.current);\r\n\r\n        // Check if rendering completed successfully\r\n        if (previewRef.current && previewRef.current.childElementCount === 0) {\r\n          alert(\"Rendering failed. No content available.\");\r\n          return;\r\n        }\r\n\r\n        // Convert the rendered HTML to a PDF\r\n        const pdfOptions = {\r\n          margin: 1,\r\n          filename: \"converted.pdf\",\r\n          html2canvas: {\r\n            scale: 2, // Increase resolution for better quality\r\n            useCORS: true, // Handle cross-origin images if necessary\r\n          },\r\n          jsPDF: { unit: \"in\", format: \"letter\", orientation: \"portrait\" },\r\n        };\r\n\r\n        // Ensure content is visible before converting to PDF\r\n        previewRef.current.style.visibility = \"visible\";\r\n\r\n        // Use html2pdf to generate the PDF from the rendered HTML\r\n        html2pdf().set(pdfOptions).from(previewRef.current).save();\r\n\r\n        // Optionally hide content again after PDF generation\r\n        previewRef.current.style.visibility = \"hidden\";\r\n      } catch (error) {\r\n        console.error(\"Error converting file:\", error);\r\n        alert(\"Error converting the document. Please try again.\");\r\n      }\r\n    };\r\n\r\n    // Read the file as an ArrayBuffer\r\n    reader.readAsArrayBuffer(file);\r\n  };\r\n\r\n  return (\r\n    <div className=\"doc-to-pdf-container\">\r\n      <div className=\"file-input-container\">\r\n        <input\r\n          type=\"file\"\r\n          accept=\".docx\"\r\n          onChange={handleFileChange}\r\n          className=\"file-input\"\r\n        />\r\n      </div>\r\n\r\n      <button\r\n        onClick={handleConvert}\r\n        className=\"convert-button\"\r\n      >\r\n        Convert to PDF\r\n      </button>\r\n\r\n      {/* Hidden container for rendering .docx content */}\r\n      <div\r\n        ref={previewRef}\r\n        style={{ visibility: \"hidden\", minHeight: \"1px\", maxWidth: \"100%\" }}\r\n      ></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DocToPdfConverter;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}